
CdM-8 Assembler v2.1 <<<CW1.asm>>> 08/12/2016 13:59:37

                  1  macro define/2
                  2          asect $2
                  3          $1:
                  4  mend
                  5  
                  6  define stack, 0xf0      # Gives the address 0xf0 the symbolic name stack
                  7  
                  8  define HOReg, 0xf8      # higher order address bits
                  9  define LOReg, 0xf9      # lower order address bits
                 10  
                 11  define IOData, 0xfa     # data to be written/read
                 12  
                 13  
                 14          asect 0x00
                 15  start:
00: d0 f0        16          ldi r0,stack
02: c8           17          stsp r0 # Sets the initial value of SP to 0xf0
                 18  
03: d6 06        19          jsr ramTest     # run test subroutine
                 20  
05: d4           21  halt
                 22  
                 23  ramTest:
                 24          # store value 22 in ram address 0x0010
06: d0 00        25          ldi r0, 0x00
08: d1 10        26          ldi r1, 0x10
0a: d2 16        27          ldi r2, 22
0c: d6 22        28          jsr ramStore
                 29  
                 30          # read value from address 0x0100
0e: d0 01        31          ldi r0, 0x01
10: d1 00        32          ldi r1, 0x00
12: d6 2e        33          jsr ramLoad
                 34  
                 35          # store value 49 in ram address 0x0110
14: d0 01        36          ldi r0, 0x01
16: d1 10        37          ldi r1, 0x10
18: d2 31        38          ldi r2, 49
1a: d6 22        39          jsr ramStore
                 40  
                 41          # read value from address 0x0101
1c: d0 01        42          ldi r0, 0x01
1e: d1 01        43          ldi r1, 0x01
20: d6 2e        44          jsr ramLoad
                 45  
                 46  # Saves r2 to address in (r1<<8) + r0
                 47  ramStore:
22: c3           48          save r3 # keep Subroutine clean
                 49  
23: d3 f8        50          ldi r3, HOReg
25: ac           51          st r3, r0               # load high order address bits into register
                 52  
26: d3 f9        53          ldi r3, LOReg   # load low order address bits into register
28: ad           54          st r3, r1
                 55  
29: d3 fa        56          ldi r3, IOData  # store data from IOData into RAM
2b: ae           57          st r3, r2
                 58  
2c: c7           59          restore
2d: d7           60          rts
                 61  
                 62  
                 63  ramLoad:        # result in r2
                 64  
2e: c3           65          save r3 # keep Subroutine clean
                 66  
2f: d3 f8        67          ldi r3, HOReg   # load high order address bits into register
31: ac           68          st r3, r0
                 69  
32: d3 f9        70          ldi r3, LOReg   # load low order address bits into register
34: ad           71          st r3, r1
                 72  
35: d3 fa        73          ldi r3, IOData
37: be           74          ld r3, r2               # read data from RAM into r2
                 75  
38: c7           76          restore
39: d7           77          rts
                 78  
                 79  end
                 80  
                 81  
                 82  
                 83  
                 84  

======================================================================

SECTIONS:
Name	Size	Relocation offsets


ENTRIES:
Section		Name/Offset

$abs		<NONE>

EXTERNALS:
Name		Used in


======================================================================
